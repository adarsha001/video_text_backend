# from fpdf import FPDF, XPos, YPos
# from PIL import Image
# import os
# import logging
# import platform

# logger = logging.getLogger(__name__)

# class PDFGenerator:
#     def __init__(self, base_dir):
#         self.base_dir = base_dir

#     def generate_pdf(self, session_id, selected_frames=None):
#         try:
#             selected_frames = selected_frames or []
#             frames_dir = os.path.join(self.base_dir,  'frames', session_id)
# # 
#             if not os.path.exists(frames_dir):
#                 raise FileNotFoundError('Session not found')

#             # Read text mapping from results.txt
#             text_mapping = {}
#             frame_titles = {}
#             results_file = os.path.join(frames_dir, "results.txt")
#             if os.path.exists(results_file):
#                 with open(results_file, 'r') as f:
#                     for line in f:
#                         if ':' in line:
#                             filename, text = line.split(':', 1)
#                             text_mapping[filename.strip()] = text.strip()
#                             title = ' '.join(text.strip().split()[:5]) + "..."
#                             frame_titles[filename.strip()] = title

#             # List image files
#             all_files = os.listdir(frames_dir)
#             frame_files = sorted(
#                 [f for f in all_files if f.endswith(('.png', '.jpg', '.jpeg'))],
#                 key=lambda x: int(x.split('_')[1].split('.')[0])
#             )

#             if selected_frames:
#                 frame_files = [frame_files[i] for i in selected_frames if i < len(frame_files)]

#             if not frame_files:
#                 raise ValueError('No frames selected or available')

#             pdf = self._create_pdf(frame_files, frame_titles, text_mapping, frames_dir)

#             # Save PDF
#             pdfs_dir = os.path.join(self.base_dir, 'pdfs')
#             os.makedirs(pdfs_dir, exist_ok=True)
#             pdf_file = os.path.join(pdfs_dir, f"{session_id}.pdf")
#             pdf.output(pdf_file)

#             return {
#                 'pdf_path': f'/pdfs/{session_id}.pdf',
#                 'message': 'PDF generated successfully'
#             }

#         except Exception as e:
#             logger.error(f"PDF generation error: {str(e)}", exc_info=True)
#             raise

#     def _create_pdf(self, frame_files, frame_titles, text_mapping, frames_dir):
#         pdf = FPDF()
#         pdf.set_auto_page_break(auto=True, margin=15)
#         pdf.set_top_margin(10)

#         # Add fonts - fallback if not Windows
#         try:
#             if platform.system() == 'Windows':
#                 pdf.add_font('Arial', '', 'c:/windows/fonts/arial.ttf', uni=True)
#                 pdf.add_font('Arial', 'B', 'c:/windows/fonts/arialbd.ttf', uni=True)
#                 pdf.add_font('Arial', 'I', 'c:/windows/fonts/ariali.ttf', uni=True)
#                 pdf.add_font('Arial', 'BI', 'c:/windows/fonts/arialbi.ttf', uni=True)
#                 font_name = 'Arial'
#             else:
#                 font_name = 'Helvetica'  # Built-in fallback
#         except Exception as font_error:
#             logger.warning(f"Font load failed, using default: {font_error}")
#             font_name = 'Helvetica'

#         # Index page
#         index_link = pdf.add_link()
#         pdf.add_page()
#         pdf.set_link(index_link)
#         pdf.set_font(font_name, 'B', 16)
#         pdf.cell(0, 10, "Video Frames Index", new_x=XPos.LMARGIN, new_y=YPos.NEXT, align='C')
#         pdf.ln(10)

#         pdf.set_font(font_name, size=12)
#         page_links = {}
#         page_number = 2

#         for i, frame_file in enumerate(frame_files):
#             title = frame_titles.get(frame_file, f"Frame {i+1}")
#             link = pdf.add_link()
#             page_links[frame_file] = link
#             pdf.cell(0, 10, f"{title} ................................ {page_number}",
#                      new_x=XPos.LMARGIN, new_y=YPos.NEXT, link=link)
#             page_number += 1

#         for frame_file in frame_files:
#             frame_path = os.path.join(frames_dir, frame_file)
#             text = text_mapping.get(frame_file, "No text available")

#             pdf.add_page()
#             pdf.set_link(page_links[frame_file])
#             pdf.set_font(font_name, size=10)
#             pdf.set_text_color(0, 0, 255)
#             pdf.cell(0, 10, "Back to Index", new_x=XPos.LMARGIN, new_y=YPos.NEXT, align='R', link=index_link)
#             pdf.set_text_color(0, 0, 0)

#             pdf.set_font(font_name, 'B', 12)
#             pdf.cell(0, 10, "video generated by clipai.in", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
#             pdf.ln(2)

#             try:
#                 with Image.open(frame_path) as img:
#                     width, height = img.size
#                     aspect_ratio = width / height
#                     img_width = 180
#                     img_height = img_width / aspect_ratio
#                     if img_height > 150:
#                         img_height = 150
#                         img_width = img_height * aspect_ratio
#                     x_pos = (210 - img_width) / 2
#                     y_pos = pdf.get_y()
#                     pdf.image(frame_path, x=x_pos, y=y_pos, w=img_width, h=img_height)
#                     pdf.set_y(y_pos + img_height + 5)
#             except Exception as e:
#                 pdf.set_font(font_name, 'I', 10)
#                 pdf.cell(0, 10, f"Image load failed: {e}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)

#             pdf.set_font(font_name, '', 11)
#             pdf.multi_cell(0, 7, text)

#         return pdf
